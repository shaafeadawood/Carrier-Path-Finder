import React, { useState, useEffect } from 'react';
import { supabase } from '../../supabaseClient';
import SkillsVisualization from './SkillsVisualization';

const CVImprovement = ({ userId, data, isUsingFallback }) => {
  const [improvements, setImprovements] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Function to generate dummy improvement data based on CV data
  const generateDummyImprovements = (cvData) => {
    // Extract skills from CV data if available or use default skills
    const skills = (cvData?.skills && Array.isArray(cvData.skills) && cvData.skills.length > 0)
      ? cvData.skills 
      : ['JavaScript', 'React', 'HTML', 'CSS'];
    
    // Generate gaps based on skills or use defaults
    const gapSkills = ['TypeScript', 'Node.js', 'GraphQL', 'AWS'];
    
    // Get experience information if available
    const experienceLevel = "Mid-level Developer";
    const industries = ["Software Development", "Web Development"];
    
    if (cvData && cvData.work_experience) {
      // If we have work experience data, add relevant industries
      if (Array.isArray(cvData.work_experience)) {
        cvData.work_experience.forEach(exp => {
          // Extract industry from company or position if possible
          const company = exp.company?.toLowerCase() || '';
          if (company.includes('finance') || company.includes('bank')) {
            industries.push("Finance");
          } else if (company.includes('health') || company.includes('medical')) {
            industries.push("Healthcare");
          } else if (company.includes('retail') || company.includes('shop')) {
            industries.push("Retail");
          }
        });
      }
    }
    
    // Return structured improvement data
    return {
      skills_analysis: {
        current_skill_level: experienceLevel,
        strengths: skills.slice(0, Math.min(skills.length, 5)),
        gaps: gapSkills,
        recommendations: [
          "Learn TypeScript to improve type safety in your code",
          "Build a full-stack project with Node.js and Express",
          "Take an AWS certification course to understand cloud infrastructure",
          "Contribute to open source projects to demonstrate collaboration skills"
        ],
        relevant_industries: [...new Set(industries)] // Remove duplicates
      },
      learning_plan: {
        courses: [
          "Advanced React Patterns and Performance",
          "TypeScript for JavaScript Developers",
          "AWS Certified Developer Associate",
          "GraphQL API Development"
        ]
      },
      recommendations: [
        "Update your portfolio with recent projects",
        "Add specific metrics and outcomes to your work experience",
        "Use more action verbs in your achievements"
      ]
    };
  };

  useEffect(() => {
    async function fetchImprovements() {
      setLoading(true);
      console.log("CVImprovement received props:", { userId, data, isUsingFallback });
      
      try {
        // First check if we have data with skills_analysis from LangGraph workflow
        if (data && data.skills_analysis) {
          console.log("Using provided skills_analysis data:", data.skills_analysis);
          setImprovements(data);
          setLoading(false);
          return;
        } 
        
        // Check if we have skills_analysis in workflow_result (nested format)
        if (data && data.workflow_result && data.workflow_result.skills_analysis) {
          console.log("Using skills_analysis from workflow_result:", data.workflow_result.skills_analysis);
          // Create a new object with the skills_analysis from workflow_result
          const combinedData = {
            ...data,
            skills_analysis: data.workflow_result.skills_analysis
          };
          setImprovements(combinedData);
          setLoading(false);
          return;
        }
        
        // Otherwise fetch data generated by the LangGraph workflow if we have userId
        if (userId) {
          try {
            const { data: supabaseData, error } = await supabase
              .from('roadmaps')
              .select('roadmap_data, created_at')
              .eq('user_id', userId)
              .order('created_at', { ascending: false })
              .limit(1)
              .single();

            if (!error && supabaseData && supabaseData.roadmap_data) {
              console.log("Using roadmap data from Supabase:", supabaseData.roadmap_data);
              setImprovements(supabaseData.roadmap_data);
              setLoading(false);
              return;
            }
          } catch (err) {
            console.error('Exception fetching CV improvements from Supabase:', err);
            // Continue to fallback
          }
        }
        
        // If we reach here, use generated dummy data
        console.log("Using dummy improvement data");
        const dummyData = generateDummyImprovements(data);
        setImprovements(dummyData);
      } catch (err) {
        console.error('Exception in fetchImprovements:', err);
        setError('An unexpected error occurred while processing CV improvements.');
        
        // Create dummy data for fallback
        console.log("Using dummy data after error");
        const dummyData = generateDummyImprovements(data);
        setImprovements(dummyData);
      } finally {
        setLoading(false);
      }
    }

    // If we have either userId or direct data, try to load improvements
    if (userId || data) {
      fetchImprovements();
    } else {
      setLoading(false); // No data to process
    }
  }, [userId, data, isUsingFallback]);

  if (loading) return (
    <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
      <div className="animate-pulse flex space-x-4">
        <div className="flex-1 space-y-6 py-1">
          <div className="h-6 bg-slate-200 dark:bg-slate-700 rounded"></div>
          <div className="space-y-3">
            <div className="grid grid-cols-3 gap-4">
              <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded col-span-2"></div>
              <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded col-span-1"></div>
            </div>
            <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded"></div>
            <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded"></div>
          </div>
        </div>
      </div>
      <div className="text-center mt-4 text-gray-500 dark:text-gray-400">Loading improvement suggestions...</div>
    </div>
  );
  
  if (error) return (
    <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow border-l-4 border-red-500">
      <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">CV Improvement</h2>
      <p className="text-gray-600 dark:text-gray-300">{error}</p>
      <button 
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        onClick={() => window.location.href = '/cv'}
      >
        Upload or Update CV
      </button>
    </div>
  );
  
  if (!improvements) return (
    <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow border-l-4 border-yellow-500">
      <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">CV Improvement</h2>
      <p className="text-gray-600 dark:text-gray-300">No CV improvement suggestions found. Upload your CV to get personalized recommendations.</p>
      <button 
        className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        onClick={() => window.location.href = '/cv'}
      >
        Upload CV
      </button>
    </div>
  );

  // Final render with error handling
  try {
    return (
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
        <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">
          CV Improvement Suggestions
          {isUsingFallback && <span className="ml-2 text-sm font-normal text-yellow-600 dark:text-yellow-400">(Using AI simulated analysis)</span>}
        </h2>
        
        {improvements.skills_analysis && (
          <div className="mt-6">
            <h3 className="text-xl font-semibold text-gray-700 dark:text-gray-200">Skills Analysis</h3>
            <div className="mt-2 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <p className="text-gray-700 dark:text-gray-300">
                <span className="font-medium">Current Level:</span> {improvements.skills_analysis.current_skill_level}
              </p>
            
            <div className="mt-3">
              <h4 className="font-medium text-gray-700 dark:text-gray-300">Strengths:</h4>
              <div className="flex flex-wrap gap-2 mt-1">
                {improvements.skills_analysis.strengths?.map((skill, index) => (
                  <span key={index} className="px-3 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full text-sm">
                    {skill}
                  </span>
                ))}
              </div>
            </div>
            
            <div className="mt-3">
              <h4 className="font-medium text-gray-700 dark:text-gray-300">Areas to Develop:</h4>
              <div className="flex flex-wrap gap-2 mt-1">
                {improvements.skills_analysis.gaps?.map((skill, index) => (
                  <span key={index} className="px-3 py-1 bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 rounded-full text-sm">
                    {skill}
                  </span>
                ))}
              </div>
            </div>
            
            <SkillsVisualization 
              currentSkills={improvements.skills_analysis.strengths || []}
              targetSkills={improvements.skills_analysis.gaps || []}
            />
          </div>
        </div>
      )}
      
      {improvements.recommendations && (
        <div className="mt-6">
          <h3 className="text-xl font-semibold text-gray-700 dark:text-gray-200">Recommended Improvements</h3>
          <ul className="mt-2 space-y-2">
            {improvements.skills_analysis?.recommendations?.map((rec, index) => (
              <li key={index} className="flex items-start p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <span className="inline-flex items-center justify-center h-6 w-6 rounded-full bg-blue-100 text-blue-500 mr-3 flex-shrink-0">
                  {index + 1}
                </span>
                <span className="text-gray-700 dark:text-gray-300">{rec}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {improvements.learning_plan && (
        <div className="mt-6">
          <h3 className="text-xl font-semibold text-gray-700 dark:text-gray-200">Learning Resources</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-2">
            {improvements.learning_plan.courses?.slice(0, 3).map((course, index) => (
              <div key={index} className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <h4 className="font-medium text-gray-800 dark:text-gray-200">{course}</h4>
                <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Recommended Course</p>
              </div>
            ))}
          </div>
          <button className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
            View Full Learning Plan
          </button>
        </div>
      )}
    </div>
  );
  } catch (err) {
    console.error("Error rendering CV improvement suggestions:", err);
    return (
      <div className="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
        <h2 className="text-2xl font-bold mb-4 text-red-600 dark:text-red-400">
          Unable to Display Improvements
        </h2>
        <p className="text-gray-700 dark:text-gray-300 mb-4">
          We encountered an error while trying to generate improvement suggestions. 
          This could be due to an issue with the data format or AI service.
        </p>
        <button 
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
          onClick={() => window.location.reload()}
        >
          Reload Page
        </button>
      </div>
    );
  }
};

export default CVImprovement;